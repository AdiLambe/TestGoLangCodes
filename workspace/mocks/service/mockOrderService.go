// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/shikha809/banking/service (interfaces: OrderService)


// Package service is a generated GoMock package.
package service


import (
reflect "reflect"


gomock "github.com/golang/mock/gomock"


"context"
"github.com/AdiLambe/TestGoLangCodes/workspace/domain"
"github.com/AdiLambe/TestGoLangCodes/workspace/dto"
"github.com/AdiLambe/TestGoLangCodes/workspace/errs"
)


// MockOrderService is a mock of OrderService interface.
type MockOrderService struct {
ctrl *gomock.Controller
recorder *MockOrderServiceMockRecorder
}



// MockOrderServiceMockRecorder is the mock recorder for MockOrderService.
type MockOrderServiceMockRecorder struct {
mock *MockOrderService
}



// NewMockOrderService creates a new mock instance.
func NewMockOrderService(ctrl *gomock.Controller) *MockOrderService {
mock := &MockOrderService{ctrl: ctrl}
mock.recorder = &MockOrderServiceMockRecorder{mock}
return mock
}



// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderService) EXPECT() *MockOrderServiceMockRecorder {
return m.recorder
}



func (m *MockOrderService) GetRepositry() (domain.OrderRepository){
return nil
}


// GetOrdersList mocks base method.
func (m *MockOrderService) GetOrdersList(ctx context.Context,arg0 string) ([]dto.OrderResponse, *errs.AppError) {
m.ctrl.T.Helper()
ret := m.ctrl.Call(m, "GetOrdersList", arg0)
ret0, _ := ret[0].([]dto.OrderResponse)
ret1, _ := ret[1].(*errs.AppError)
return ret0, ret1
}



// GetOrdersList indicates an expected call of GetOrdersList.
func (mr *MockOrderServiceMockRecorder) GetOrdersList(arg0 interface{}) *gomock.Call {
mr.mock.ctrl.T.Helper()
return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersList", reflect.TypeOf((*MockOrderService)(nil).GetOrdersList), arg0)
}



// GetOrder mocks base method.
func (m *MockOrderService) GetOrder(arg0 string) (*dto.OrderResponse, *errs.AppError) {
m.ctrl.T.Helper()
ret := m.ctrl.Call(m, "GetOrder", arg0)
ret0, _ := ret[0].(*dto.OrderResponse)
ret1, _ := ret[1].(*errs.AppError)
return ret0, ret1
}



// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderServiceMockRecorder) GetOrder(arg0 interface{}) *gomock.Call {
mr.mock.ctrl.T.Helper()
return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderService)(nil).GetOrder), arg0)
}


//Create Order


func (m *MockOrderService) CreateOrder(req *dto.NewOrderRequest) (*dto.NewOrderResponse, *errs.AppError) {
m.ctrl.T.Helper()
ret := m.ctrl.Call(m, "CreateOrder",req )
ret0, _ := ret[0].(*dto.NewOrderResponse)
ret1, _ := ret[1].(*errs.AppError)
return ret0, ret1
}


/// CreateOrder indicates an expected call of GetOrder.
func (mr *MockOrderServiceMockRecorder) CreateOrder(arg0 interface{}) *gomock.Call {
mr.mock.ctrl.T.Helper()
return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderService)(nil).GetOrder), arg0)
}


//save Order
func (m *MockOrderService) SaveOrder(Order domain.Order) ( *dto.OrderResponse, *errs.AppError) {
m.ctrl.T.Helper()
ret := m.ctrl.Call(m, "SaveOrder", Order)
ret0, _ := ret[0].(*dto.OrderResponse)
ret1, _ := ret[1].(*errs.AppError)
return ret0, ret1
}



// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderServiceMockRecorder) SaveOrder(arg0 interface{}) *gomock.Call {
mr.mock.ctrl.T.Helper()
return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockOrderService)(nil).GetOrder), arg0)
}